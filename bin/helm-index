#!/usr/bin/env python3

# Copyright 2020 Hewlett Packard Enterprise Development LP


from urllib.parse import urlparse

import semver


def is_devel_version(s):
    version = semver.VersionInfo.parse(s)
    return not (version.prerelease is None and version.build is None)


def parse_nexus_index(nexus_index, index=None, devel=False):
    if index is None:
        index = {}
    repos = {}

    # Initialize index based on repositories
    for repo in nexus_index['repositories']:
        if repo['format'] != 'helm':
            continue
        if repo['type'] == 'group':
            continue
        if repo['type'] == 'proxy':
            url = urlparse(repo['proxy']['remoteUrl'])
        else:
            url = urlparse(repo['url'])
        url = url.geturl()
        repos[repo['name']] = url
        index[url] = {
            #'url': url,
            #'ca-file': None,
            #'cert-file': None,
            #'key-file': None,
            #'password': None,
            #'username': None,
            'charts': {},
        }

    # Populate index based on components
    for component in nexus_index['components']:
        url = repos.get(component['repository'], None)
        if not url:
            continue
        if not devel and is_devel_version(component['version']):
            continue
        versions = index[url]['charts'].setdefault(component['name'], [])
        if component['version'] not in versions:
            versions.append(component['version'])

    return index


def parse_loftsman_manifest(manifest, index=None, default_repo=None):
    if index is None:
        index = {}
    spec = manifest.get('spec', {})
    # Create mapping of chart sources
    sources = {c['name']: c['location'] for c in spec.get('sources', {}).get('charts', []) if c.get('type', '') == 'repo'}
    # Add each chart version to the index
    for c in spec.get('charts', []):
        versions = index.setdefault(sources.get(c.get('source', None), default_repo), {'charts': {}})['charts'].setdefault(c['name'], [])
        if c['version'] not in versions:
            versions.append(c['version'])
    return index


def main():
    import argparse
    import json
    import textwrap

    import yaml

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent("""
            Generates an index file for use with helm-sync of the form:

                <url>:
                  charts:
                    <name>:
                    - <version>
                  ca-file: <ca-file>
                  cert-file: <cert-file>
                  key-file: <key-file>
                  username: <username>
                  password: <password>

            Currently, only the "charts" field is populated.
        """),
    )
    parser.add_argument('-i', '--index', metavar='FILE', type=argparse.FileType('r'), help="Helm chart index")
    parser.add_argument('-o', '--output', metavar='FILE', type=argparse.FileType('w+'), default='-', help="Skopeo index of container images (default: stdout)")
    parser.add_argument('-r', '--default-repo', default='http://helmrepo.dev.cray.com:8080/', help="Default Helm repository URL")
    parser.add_argument('--nexus', metavar='FILE', action='append', type=argparse.FileType('r'), help='Nexus JSON index')
    parser.add_argument('--devel', action='store_true', default=False, help="Include development versions from Nexus JSON index")
    parser.add_argument('manifests', metavar='MANIFEST', nargs='*', type=argparse.FileType('r'), default='-', help="Loftsman manifest")
    args = parser.parse_args()

    if args.index:
        index = yaml.safe_load(args.index)
    else:
        index = {}

    if args.nexus:
        for f in args.nexus:
            parse_nexus_index(json.load(f), index, args.devel)

    for f in args.manifests:
        parse_loftsman_manifest(yaml.safe_load(f), index, args.default_repo)

    # Remove empty repositories
    empty = [k for k, v in index.items() if not v.get('charts')]
    for k in empty:
        del index[k]

    if index:
        yaml.safe_dump(index, args.output)


if __name__ == "__main__":
    main()
